name: Release

on:
  push:
    branches:
      - "main"
    tags:
      - "*"

env:
  REGISTRY: ghcr.io

jobs:
  build-and-push-image:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write

    steps:
      - name: Log in to the Container registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2

      - uses: actions/setup-go@v3
        with:
          go-version: ">=1.18.0"

    - name: Setup OPA
      uses: open-policy-agent/setup-opa@v1
      with:
        version: latest

      # Get values for cache paths to be used in later steps
      - id: go-cache-paths
        run: |
          echo "::set-output name=go-build::$(go env GOCACHE)"
          echo "::set-output name=go-mod::$(go env GOMODCACHE)"

      - name: Checkout repository
        uses: actions/checkout@v2

      # Cache go build cache, used to speedup go test
      - name: Go Build Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-build }}
          key: ${{ runner.os }}-go-build-${{ hashFiles('**/go.sum') }}

      # Cache go mod cache, used to speedup builds
      - name: Go Mod Cache
        uses: actions/cache@v2
        with:
          path: ${{ steps.go-cache-paths.outputs.go-mod }}
          key: ${{ runner.os }}-go-mod-${{ hashFiles('**/go.sum') }}

      # - uses: golangci/golangci-lint-action@v3
      #   with:
      #     version: v1.46.2

      - name: Test
        run: make default

      - name: Extract Tag
        if: startsWith(github.ref, 'refs/tags/v')
        id: vars
        run: echo ::set-output name=tag::${GITHUB_REF#refs/tags/v}

      - name: Build&Push tagged release
        if: startsWith(github.ref, 'refs/tags/v')
        env:
          TAG: ${{ steps.vars.outputs.tag }}
        run: |
          make DOCKER_BUILDX_ARGS=--push container-image-${TAG}

      - name: Build&Push latest release
        if: "!startsWith(github.ref, 'refs/tags/v')"
        run: make DOCKER_BUILDX_ARGS=--push container-image-latest

  publish-gh-release:
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2
      # - name: Extract Tag
      #   id: vars
      #   run: echo ::set-output name=tag::${GITHUB_REF#refs/tags/v}
      # - name: Build manifests
      #   env:
      #     RELEASE_VERSION: ${{ steps.vars.outputs.tag }}
      #   run: |
      #     set -eu -o pipefail
      #     kustomize build config/default \
      #       | sed "s#controller:latest#${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${RELEASE_VERSION}#g" \
      #       > manifests.yaml
      #     kustomize build config/crd > crds.yaml
      - name: Release
        uses: softprops/action-gh-release@v1
        # with:
        #   files: |
        #     composable.yaml
        #     crds.yaml
